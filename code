import org.json.JSONObject;
import org.json.JSONTokener;

import java.io.FileReader;
import java.math.BigInteger;
import java.util.ArrayList;
import java.util.List;

public class ShamirSecretSharing {
    
    // Point class to hold (x, y) coordinates
    static class Point {
        int x;
        BigInteger y;

        Point(int x, BigInteger y) {
            this.x = x;
            this.y = y;
        }
    }

    // Method to decode the Y value from given base
    private static BigInteger decodeValue(String value, int base) {
        return new BigInteger(value, base);
    }

    // Method to read JSON input and parse points
    private static List<Point> parseInput(String filePath) {
        List<Point> points = new ArrayList<>();
        
        try (FileReader reader = new FileReader(filePath)) {
            JSONObject jsonObject = new JSONObject(new JSONTokener(reader));
            JSONObject keys = jsonObject.getJSONObject("keys");

            int n = keys.getInt("n");
            int k = keys.getInt("k");

            for (int i = 1; i <= n; i++) {
                if (jsonObject.has(String.valueOf(i))) {
                    JSONObject root = jsonObject.getJSONObject(String.valueOf(i));
                    int base = root.getInt("base");
                    String value = root.getString("value");

                    BigInteger yDecoded = decodeValue(value, base);
                    points.add(new Point(i, yDecoded));
                }
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
        
        return points;
    }

    // Method to perform Lagrange interpolation to find constant term
    private static BigInteger findConstantTerm(List<Point> points, int k) {
        BigInteger constantTerm = BigInteger.ZERO;

        // Lagrange interpolation
        for (int i = 0; i < k; i++) {
            Point pI = points.get(i);
            BigInteger term = pI.y;

            for (int j = 0; j < k; j++) {
                if (i != j) {
                    Point pJ = points.get(j);

                    // Compute term * (xj / (xj - xi))
                    BigInteger numerator = BigInteger.valueOf(-pJ.x);
                    BigInteger denominator = BigInteger.valueOf(pI.x - pJ.x);

                    term = term.multiply(numerator).divide(denominator);
                }
            }

            constantTerm = constantTerm.add(term);
        }

        return constantTerm;
    }

    public static void main(String[] args) {
        // Test Case 1
        List<Point> pointsTestCase1 = parseInput("testcase1.json");
        BigInteger constantTermTestCase1 = findConstantTerm(pointsTestCase1, 3);
        System.out.println("Constant term for Test Case 1: " + constantTermTestCase1);

        // Test Case 2
        List<Point> pointsTestCase2 = parseInput("testcase2.json");
        BigInteger constantTermTestCase2 = findConstantTerm(pointsTestCase2, 7);
        System.out.println("Constant term for Test Case 2: " + constantTermTestCase2);
    }
}
